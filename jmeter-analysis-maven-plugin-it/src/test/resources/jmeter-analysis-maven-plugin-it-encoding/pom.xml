<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.lazerycode.jmeter</groupId>
    <artifactId>jmeter-analysis-maven-plugin-it-parent</artifactId>
    <version>1.0.5-SNAPSHOT</version>
    <relativePath/>
  </parent>

  <artifactId>jmeter-analysis-maven-plugin-it-encoding</artifactId>
  <packaging>pom</packaging>

  <url>http://jmeter.lazerycode.com</url>

  <description>
    Runs the analysis of a JMeter maven results file

    Invoke with "mvn clean verify"
  </description>

  <build>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>jmeter-analysis-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>analyze</goal>
            </goals>
            <phase>post-integration-test</phase>
            <configuration>
              <!--
              source file that contains jmeter result data. Needs to be XML format or a GZIPed XML format
              -->
              <source>${project.basedir}/src/main/resources/*</source>

              <!--
              directory where to store analysis result files. At least a file "summary.txt" will be stored here.
              -->
              <targetDirectory>${project.build.directory}/results</targetDirectory>

              <!--
              Defines groups of requests by URL patterns,
              e.g. URIs starting with /mock/page are associated with group "pages". All analysis results are
              If there is no such mapping then the threadgroups from the jmeter.xml are used.
              -->
              <!--<requestGroups>-->
                <!--<test>/en-US/firefox/**</test>-->
              <!--</requestGroups>-->

              <!--
              Mapping from resource URL to file name. Every resource will be downloaded and stored in 'targetDirectory'
              with the given filename. Tokens "_FROM_" and "_TO_" can be used as placeholders. These placeholders will
              be replaced by timestamps of execution interval (formatted as ISO8601, e.g. '20111216T145509+0100').
              -->
              <!--<remoteResources>-->
                <!--<property>-->
                  <!--<name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name>-->
                  <!--<value>my_resource.txt</value>-->
                <!--</property>-->
              <!--</remoteResources>-->

            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>